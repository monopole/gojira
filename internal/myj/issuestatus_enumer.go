// Code generated by "enumer -linecomment -type=IssueStatus"; DO NOT EDIT.

package myj

import (
	"fmt"
	"strings"
)

const _IssueStatusName = "IssueStatusUnknownBacklogDoneClosedClosed Without ActionIn ProgressIn QueueRelease CandidateIn ValidationValidationReady for DevelopmentReady for Review"

var _IssueStatusIndex = [...]uint8{0, 18, 25, 29, 35, 56, 67, 75, 92, 105, 115, 136, 152}

const _IssueStatusLowerName = "issuestatusunknownbacklogdoneclosedclosed without actionin progressin queuerelease candidatein validationvalidationready for developmentready for review"

func (i IssueStatus) String() string {
	if i < 0 || i >= IssueStatus(len(_IssueStatusIndex)-1) {
		return fmt.Sprintf("IssueStatus(%d)", i)
	}
	return _IssueStatusName[_IssueStatusIndex[i]:_IssueStatusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _IssueStatusNoOp() {
	var x [1]struct{}
	_ = x[IssueStatusUnknown-(0)]
	_ = x[IssueStatusBacklog-(1)]
	_ = x[IssueStatusDone-(2)]
	_ = x[IssueStatusClosed-(3)]
	_ = x[IssueStatusClosedWoAction-(4)]
	_ = x[IssueStatusInProgress-(5)]
	_ = x[IssueStatusInQueue-(6)]
	_ = x[IssueStatusReleaseCandidate-(7)]
	_ = x[IssueStatusInValidation-(8)]
	_ = x[IssueStatusValidation-(9)]
	_ = x[IssueStatusReadyForDev-(10)]
	_ = x[IssueStatusReadyForReview-(11)]
}

var _IssueStatusValues = []IssueStatus{IssueStatusUnknown, IssueStatusBacklog, IssueStatusDone, IssueStatusClosed, IssueStatusClosedWoAction, IssueStatusInProgress, IssueStatusInQueue, IssueStatusReleaseCandidate, IssueStatusInValidation, IssueStatusValidation, IssueStatusReadyForDev, IssueStatusReadyForReview}

var _IssueStatusNameToValueMap = map[string]IssueStatus{
	_IssueStatusName[0:18]:         IssueStatusUnknown,
	_IssueStatusLowerName[0:18]:    IssueStatusUnknown,
	_IssueStatusName[18:25]:        IssueStatusBacklog,
	_IssueStatusLowerName[18:25]:   IssueStatusBacklog,
	_IssueStatusName[25:29]:        IssueStatusDone,
	_IssueStatusLowerName[25:29]:   IssueStatusDone,
	_IssueStatusName[29:35]:        IssueStatusClosed,
	_IssueStatusLowerName[29:35]:   IssueStatusClosed,
	_IssueStatusName[35:56]:        IssueStatusClosedWoAction,
	_IssueStatusLowerName[35:56]:   IssueStatusClosedWoAction,
	_IssueStatusName[56:67]:        IssueStatusInProgress,
	_IssueStatusLowerName[56:67]:   IssueStatusInProgress,
	_IssueStatusName[67:75]:        IssueStatusInQueue,
	_IssueStatusLowerName[67:75]:   IssueStatusInQueue,
	_IssueStatusName[75:92]:        IssueStatusReleaseCandidate,
	_IssueStatusLowerName[75:92]:   IssueStatusReleaseCandidate,
	_IssueStatusName[92:105]:       IssueStatusInValidation,
	_IssueStatusLowerName[92:105]:  IssueStatusInValidation,
	_IssueStatusName[105:115]:      IssueStatusValidation,
	_IssueStatusLowerName[105:115]: IssueStatusValidation,
	_IssueStatusName[115:136]:      IssueStatusReadyForDev,
	_IssueStatusLowerName[115:136]: IssueStatusReadyForDev,
	_IssueStatusName[136:152]:      IssueStatusReadyForReview,
	_IssueStatusLowerName[136:152]: IssueStatusReadyForReview,
}

var _IssueStatusNames = []string{
	_IssueStatusName[0:18],
	_IssueStatusName[18:25],
	_IssueStatusName[25:29],
	_IssueStatusName[29:35],
	_IssueStatusName[35:56],
	_IssueStatusName[56:67],
	_IssueStatusName[67:75],
	_IssueStatusName[75:92],
	_IssueStatusName[92:105],
	_IssueStatusName[105:115],
	_IssueStatusName[115:136],
	_IssueStatusName[136:152],
}

// IssueStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func IssueStatusString(s string) (IssueStatus, error) {
	if val, ok := _IssueStatusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _IssueStatusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to IssueStatus values", s)
}

// IssueStatusValues returns all values of the enum
func IssueStatusValues() []IssueStatus {
	return _IssueStatusValues
}

// IssueStatusStrings returns a slice of all String values of the enum
func IssueStatusStrings() []string {
	strs := make([]string, len(_IssueStatusNames))
	copy(strs, _IssueStatusNames)
	return strs
}

// IsAIssueStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i IssueStatus) IsAIssueStatus() bool {
	for _, v := range _IssueStatusValues {
		if i == v {
			return true
		}
	}
	return false
}
