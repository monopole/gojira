// Code generated by "enumer -linecomment -type=Rel"; DO NOT EDIT.

package myj

import (
	"fmt"
	"strings"
)

const _RelName = "RelUnknown=!=<<="

var _RelIndex = [...]uint8{0, 10, 11, 13, 14, 16}

const _RelLowerName = "relunknown=!=<<="

func (i Rel) String() string {
	if i < 0 || i >= Rel(len(_RelIndex)-1) {
		return fmt.Sprintf("Rel(%d)", i)
	}
	return _RelName[_RelIndex[i]:_RelIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _RelNoOp() {
	var x [1]struct{}
	_ = x[RelUnknown-(0)]
	_ = x[RelEqual-(1)]
	_ = x[RelNotEqual-(2)]
	_ = x[RelLess-(3)]
	_ = x[RelLessOrEqual-(4)]
}

var _RelValues = []Rel{RelUnknown, RelEqual, RelNotEqual, RelLess, RelLessOrEqual}

var _RelNameToValueMap = map[string]Rel{
	_RelName[0:10]:       RelUnknown,
	_RelLowerName[0:10]:  RelUnknown,
	_RelName[10:11]:      RelEqual,
	_RelLowerName[10:11]: RelEqual,
	_RelName[11:13]:      RelNotEqual,
	_RelLowerName[11:13]: RelNotEqual,
	_RelName[13:14]:      RelLess,
	_RelLowerName[13:14]: RelLess,
	_RelName[14:16]:      RelLessOrEqual,
	_RelLowerName[14:16]: RelLessOrEqual,
}

var _RelNames = []string{
	_RelName[0:10],
	_RelName[10:11],
	_RelName[11:13],
	_RelName[13:14],
	_RelName[14:16],
}

// RelString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func RelString(s string) (Rel, error) {
	if val, ok := _RelNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _RelNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Rel values", s)
}

// RelValues returns all values of the enum
func RelValues() []Rel {
	return _RelValues
}

// RelStrings returns a slice of all String values of the enum
func RelStrings() []string {
	strs := make([]string, len(_RelNames))
	copy(strs, _RelNames)
	return strs
}

// IsARel returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Rel) IsARel() bool {
	for _, v := range _RelValues {
		if i == v {
			return true
		}
	}
	return false
}
