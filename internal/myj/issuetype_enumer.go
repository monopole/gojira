// Code generated by "enumer -linecomment -type=IssueType"; DO NOT EDIT.

package myj

import (
	"fmt"
	"strings"
)

const _IssueTypeName = "IssueTypeUnknownInitiativeEpicStoryTaskSub-taskBug"

var _IssueTypeIndex = [...]uint8{0, 16, 26, 30, 35, 39, 47, 50}

const _IssueTypeLowerName = "issuetypeunknowninitiativeepicstorytasksub-taskbug"

func (i IssueType) String() string {
	if i < 0 || i >= IssueType(len(_IssueTypeIndex)-1) {
		return fmt.Sprintf("IssueType(%d)", i)
	}
	return _IssueTypeName[_IssueTypeIndex[i]:_IssueTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _IssueTypeNoOp() {
	var x [1]struct{}
	_ = x[IssueTypeUnknown-(0)]
	_ = x[IssueTypeInitiative-(1)]
	_ = x[IssueTypeEpic-(2)]
	_ = x[IssueTypeStory-(3)]
	_ = x[IssueTypeTask-(4)]
	_ = x[IssueTypeSubTask-(5)]
	_ = x[IssueTypeBug-(6)]
}

var _IssueTypeValues = []IssueType{IssueTypeUnknown, IssueTypeInitiative, IssueTypeEpic, IssueTypeStory, IssueTypeTask, IssueTypeSubTask, IssueTypeBug}

var _IssueTypeNameToValueMap = map[string]IssueType{
	_IssueTypeName[0:16]:       IssueTypeUnknown,
	_IssueTypeLowerName[0:16]:  IssueTypeUnknown,
	_IssueTypeName[16:26]:      IssueTypeInitiative,
	_IssueTypeLowerName[16:26]: IssueTypeInitiative,
	_IssueTypeName[26:30]:      IssueTypeEpic,
	_IssueTypeLowerName[26:30]: IssueTypeEpic,
	_IssueTypeName[30:35]:      IssueTypeStory,
	_IssueTypeLowerName[30:35]: IssueTypeStory,
	_IssueTypeName[35:39]:      IssueTypeTask,
	_IssueTypeLowerName[35:39]: IssueTypeTask,
	_IssueTypeName[39:47]:      IssueTypeSubTask,
	_IssueTypeLowerName[39:47]: IssueTypeSubTask,
	_IssueTypeName[47:50]:      IssueTypeBug,
	_IssueTypeLowerName[47:50]: IssueTypeBug,
}

var _IssueTypeNames = []string{
	_IssueTypeName[0:16],
	_IssueTypeName[16:26],
	_IssueTypeName[26:30],
	_IssueTypeName[30:35],
	_IssueTypeName[35:39],
	_IssueTypeName[39:47],
	_IssueTypeName[47:50],
}

// IssueTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func IssueTypeString(s string) (IssueType, error) {
	if val, ok := _IssueTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _IssueTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to IssueType values", s)
}

// IssueTypeValues returns all values of the enum
func IssueTypeValues() []IssueType {
	return _IssueTypeValues
}

// IssueTypeStrings returns a slice of all String values of the enum
func IssueTypeStrings() []string {
	strs := make([]string, len(_IssueTypeNames))
	copy(strs, _IssueTypeNames)
	return strs
}

// IsAIssueType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i IssueType) IsAIssueType() bool {
	for _, v := range _IssueTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
